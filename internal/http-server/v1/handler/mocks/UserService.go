// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	services "github.com/4aykovski/learning/golang/rest/internal/services"

	token_manager "github.com/4aykovski/learning/golang/rest/internal/lib/token-manager"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Logout provides a mock function with given fields: ctx, refreshToken
func (_m *UserService) Logout(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *UserService) Refresh(ctx context.Context, refreshToken string) (*token_manager.Tokens, error) {
	ret := _m.Called(ctx, refreshToken)

	var r0 *token_manager.Tokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*token_manager.Tokens, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *token_manager.Tokens); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token_manager.Tokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: ctx, input
func (_m *UserService) SignIn(ctx context.Context, input services.UserSignInInput) (*token_manager.Tokens, error) {
	ret := _m.Called(ctx, input)

	var r0 *token_manager.Tokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.UserSignInInput) (*token_manager.Tokens, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.UserSignInInput) *token_manager.Tokens); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token_manager.Tokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.UserSignInInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: ctx, input
func (_m *UserService) SignUp(ctx context.Context, input services.UserSignUpInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, services.UserSignUpInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
